<p>We are so accustomed to designing synthetic circuits in a traditional way (i.e., to build a circuit by concatenating different biobricks together) that we even believe this is all about synthetic biology. However, with the advent of the second wave of synthetic biology[1], larger circuits, systems and even circuit networks are being designed. Traditional methods are increasingly incompatible with trends in synthetic biology.</p>
<p>We are so accustomed to designing synthetic circuits in a traditional way (i.e., to build a circuit by concatenating different biobricks together) that we even believe this is all about synthetic biology. However, with the advent of the second wave of synthetic biology[1], larger circuits, systems and even circuit networks are being designed. Traditional methods are increasingly incompatible with trends in synthetic biology.</p>
<p>How can FLAME achieve all these? It adopts the following three mechanisms.</p>
<h4>1. Input-Receptor-Promoter Relationships</h4>
<p>At the beginning, users should choose the inputs, outputs and the topology for his/her circuits. Thus far, synthetic biologists have constructed most circuits from a limited number of commonly used parts (e.g., LacI, TetR and lambda repressor protein)[2], which makes possible the automatic design of genetic circuits. Through the choice of inputs, FLAME can determine what parts (for example, promoters) should be used.</p>
<p>For instance, when users choose IPTG as the input of the circuits, FLAME will then select LacI as the receptor protein of IPTG. In the absence of IPTG, LacI will repress the expression from lac promoter (Plac), and the binding of IPTG with LacI abolishes the repression imposed by LacI. Then an “IPTG-LacI-Plac” relationship is determined for further use.</p>
<p><b>Figure 1</b> LacI represses the expression from Plac, and binding of IPTG with LacI abolishes this repression.</p>
<h4>2. Framework-Based Design</h4>
<p>Next, frameworks help the automatic design. What are the functions of frameworks?</p>
<p>Supposing that a synthetic circuit was reported in literature (like toggle switch, see <b>Figure 2</b>), and we want to improve its performance or design a better one with desired performance, the easiest way may be that we would refer to this reported circuits and try to change its components or its topologies.</p>
<p>So, the reported circuits are there to provide the necessary information about how to arrange the parts in place to construct a functional circuit. For example, there must be at least one promoter, one RBS, one protein coding sequence and one terminator in a circuit, and the order of all these parts is: promoter-RBS-protein coding sequence-terminator. The primary function of frameworks is to make sure that the constructed circuit contains the necessary parts in a correct, functional order.</p>
<p>But that is not enough. Frameworks can help users with automatic design of circuits, system and ever larger networks. With the help of frameworks, users can think of design as putting circuits in place to construct a system or network, rather than a bottom-up method starting from every biobrick.</p>
<p><b>Figure 2</b> Frameworks can help users with easy designs. For instance, Gardner et al.[3] reported a toggle switch design in 2000. This design can be used as a “frame”, or a guide to users for designing toggle switches using different biological parts.</p>
<h4>3. Biobricks Still Matter</h4>
<p>It is of note that FLAME is still based on biobricks. Biobricks are “bricks” for construction of large “buildings”--circuits, systems or even networks in synthetic biology. As mentioned above, we must place the necessary parts in a “promoter-RBS-protein coding sequence-terminator” order to construct a functional circuit. The utilization of characterized and standardized biobricks guarantees this framework-based automatic method adopted by FLAME.</p>
<h2>WORK FLOW</h2>
<p>After introduction to the mechanisms of FLAME, we will briefly introduce the work flow of our software. There are four modules: Design, Display, Simulation and Experiment.</p>
<h4>1. DESIGN</h4>
